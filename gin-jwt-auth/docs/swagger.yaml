basePath: /api/v1
definitions:
  model.AddUser:
    properties:
      email:
        example: glimsil@email.com
        type: string
      name:
        example: Gustavo
        type: string
      password:
        example: randompass123
        type: string
    type: object
  model.Error:
    properties:
      code:
        example: 27
        type: integer
      message:
        example: Error message
        type: string
    type: object
  model.Message:
    properties:
      message:
        example: message
        type: string
    type: object
  model.Token:
    properties:
      token:
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoicmF5Y2FkIiwicm9sZSI6IiIsImV4cCI6MTUzOTI0OTc3OSwiaXNzIjoic2VlZG90ZWNoIn0.lVHq8J_0vfvECbplogAOCDCNh63ivTBOhya8KE6Ew_E
        type: string
    type: object
  model.User:
    properties:
      email:
        example: glimsil@email.com
        type: string
      id:
        example: 5bbdadf782ebac06a695a8e7
        type: string
      name:
        example: gustavo
        type: string
      password:
        example: randompass123
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: List APIs of User Service
  termsOfService: http://swagger.io/terms/
  title: User Service API Document
  version: "1.0"
paths:
  /admin/auth:
    post:
      consumes:
      - multipart/form-data
      description: Authenticate user
      parameters:
      - description: Username
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Token'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      security:
      - ApiKeyAuth: []
      summary: Check user authentication
      tags:
      - admin
  /user:
    get:
      consumes:
      - application/json
      description: Get a user by ID parameter
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get a user by ID parameter
      tags:
      - user
    patch:
      consumes:
      - application/json
      description: Update an existing user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Update an existing user
      tags:
      - user
    post:
      consumes:
      - application/json
      description: Add a new user
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.AddUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Add a new user
      tags:
      - user
  /user/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a user by ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Message'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Delete a user by ID
      tags:
      - user
  /user/detail/{id}:
    get:
      consumes:
      - application/json
      description: Get a user by ID
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: Get a user by ID
      tags:
      - user
  /user/list:
    get:
      consumes:
      - application/json
      description: List all existing users
      parameters:
      - description: Token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.User'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/model.Error'
      summary: List all existing users
      tags:
      - user
swagger: "2.0"
